# slurm.conf file generated by Juju.

# active controller
{% if active_controller_hostname %}
ControlMachine={{ active_controller_hostname }}
ControlAddr={{ active_controller_ingress_address }}
{% elif active_controller_ingress_address %}
ControlMachine={{ active_controller_ingress_address }}
ControlAddr={{ active_controller_ingress_address }}
{% endif %}
# backup controller
{% if backup_controller_hostname %}
BackupController={{ backup_controller_hostname }}
BackupAddr={{ backup_controller_ingress_address }}
{% elif backup_controller_ingress_address %}
BackupController={{ backup_controller_ingress_address }}
BackupAddr={{ backup_controller_ingress_address }}
{% endif %}

AuthType=auth/munge
CryptoType=crypto/munge
MailProg=/usr/bin/mail
MpiDefault={{ mpi_default }}
# TODO: Add support for cgroup
ProctrackType=proctrack/linuxproc
ReturnToService=1
SlurmctldPidFile={{ slurmctld_pid_file }}
SlurmctldPort={{ slurmctld_port }}
SlurmdPidFile={{ slurmd_pid_file }}
SlurmdPort={{ slurmd_port }}
SlurmdSpoolDir={{ slurmd_spool_dir }}
SlurmUser={{ slurm_user }}
StateSaveLocation={{ state_save_location }}
TaskPlugin=task/none

# TIMERS
KillWait={{ kill_wait }}
MinJobAge={{ min_job_age }}
SlurmctldTimeout={{ slurmctld_timeout }}
SlurmdTimeout={{ slurmd_timeout }}

# SCHEDULING
FastSchedule=1
SchedulerType={{ scheduler_type }}
SelectType=select/linear

# LOGGING AND ACCOUNTING
ClusterName={{ clustername }}
AccountingStorageType=accounting_storage/none
JobAcctGatherFrequency=30
JobAcctGatherType=jobacct_gather/none
SlurmctldDebug={{ slurmctld_debug }}
SlurmctldLogFile={{ slurmctld_log_file }}
SlurmdDebug={{ slurmd_debug }}
SlurmdLogFile={{ slurmd_log_file }}

# COMPUTE NODES
GresTypes=gpu
{% for node in nodes %}
NodeName={{ node.hostname }} NodeAddr={{ node.ingress_address }} State=UNKNOWN Sockets={{ node.inventory.sockets }} CoresPerSocket={{ node.inventory.corespersocket }} ThreadsPerCore={{ node.inventory.threadspercore }} RealMemory={{ node.inventory.memory }} Gres=gpu:{{ node.inventory.gpus }}
{%- endfor -%}
{% for partition, values in partitions.items() %}
PartitionName={{ partition }} Nodes={{ values.hosts|join(',') }} Default={{ 'YES' if values.default else 'NO' }} State=UP
{% endfor %}
